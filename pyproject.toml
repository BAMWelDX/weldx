[project]
name = "weldx"
description = "Python API for the WelDX file format and standard"
readme = {file = "README.rst", content-type="text/x-rst"}
keywords = [
  "bam", # TODO: add more keywords here! think of them as in a journal article.
  "welding",
  "weldx",
]
license = {file = "LICENSE", name="BSD License"}
authors = [
    {name="Cagtay Fabry", email="cagtay.fabry@bam.de"},
    {name="Volker Hirthammer", email="volker.hirthammer@bam.de"},
    {name="Martin K. Scherer", email="martin.scherer@bam.de"},
]
requires-python = ">=3.8"
dependencies = [
  "asdf!=2.14.0,!=2.14.1,!=2.14.2,>=2.8.2",
  "bidict",
  "boltons",
  "bottleneck>=1.3.3",
  "fs",
  "IPython",
  "meshio",
  "networkx!=2.7.0,!=2.8.1,>=2",
  "numpy>=1.20",
  "pandas>=1",
  "pint>=0.18",
  "pint-xarray>=0.2.1",
  "psutil",
  "scipy!=1.6.0,!=1.6.1,>=1.4",
  "sympy>=1.6",
  "xarray<2022.09.0,>=0.19",
]
dynamic = [
  # see: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
  "version", # version gets derived from git by setuptools_scm.
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Physics", # TODO: add more topics here!
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
]
[project.optional-dependencies]
test = [
  "nbval",
  "pytest>=6",
  "pytest-cov",
  "pytest-xdist",
]
vis = [
  "weldx_widgets>=0.2",
]

[project.urls]
bug_tracker = "https://github.com/BAMweldx/weldx/issues"
changelog = "https://github.com/BAMweldx/weldx/blob/master/CHANGELOG.rst"
documentation = "https://weldx.readthedocs.io"
repository = "https://github.com/BAMweldx/weldx"

[project.scripts]
welding_schema = "weldx.asdf.cli.welding_schema:main"

[project.entry-points."asdf.extensions"]
weldx = "weldx.asdf.extension:get_extensions"
weldx_validators = "weldx.asdf._extension:WeldxValidatorExtension"

[project.entry-points."asdf.resource_mappings"]
weldx_schemas = "weldx.asdf.extension:get_resource_mappings"



[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=40.9",
  "setuptools_scm[toml]>=6.2",
  "wheel",
]

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools_scm]
write_to = "weldx/_version.py"
write_to_template = '__version__ = "{version}"'

[tool.pytest.ini_options]
addopts = "--tb=short --color=yes -rsw --cov=weldx --cov-report=term-missing:skip-covered --doctest-modules"
#addopts = --tb=short --color=yes -rs -p no:cov
testpaths = "weldx"
# custom test markers, see https://docs.pytest.org/en/latest/example/markers.html#mark-examples
markers = "slow: marks tests as slow to run (skipped by default, enable with --runslow option)"
asdf_schema_root = "weldx/schemas/weldx.bam.de/weldx"  # TODO: couldn't we just use the entry points to resolve this?
#asdf_schema_tests_enabled = true
#asdf_schema_skip_tests =
#    weldx.bam.de/weldx/datamodels/single_pass_weld-1.0.0.schema.yaml
norecursedirs = "doc"
filterwarnings = [
    "ignore::DeprecationWarning:traittypes.*:",
    "ignore:Passing method to :FutureWarning:xarray.*:",
    "error::pint.UnitStrippedWarning",
]

[tool.coverage.run]
source = ["weldx"]

[tool.coverage.report]
omit = [
    "weldx/_version.py",
    "weldx/tests/*",
]
exclude_lines = [
# Have to re-enable the standard pragma
    "pragma: no cover",

# ignore class __repr__-like functions:
    "def __repr__",
    "def __str__",
    "def _ipython_display_",
]

[tool.mypy]
python_version = "3.9"
files = "weldx"
ignore_missing_imports = true # TODO: this is bad!
strict_optional = false
pretty = true
allow_redefinition = true
show_error_context = true
show_error_codes = true
show_column_numbers = true
sqlite_cache = true

# MyPy per-module options:
[[tool.mypy.overrides]]
module = "weldx.asdf.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "weldx.tags.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "weldx.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "weldx.welding.groove.*"
ignore_errors = true

# TODO: remove after refactoring the geometry module
[[tool.mypy.overrides]]
module = "weldx.geometry.*"
ignore_errors = true

# this is a workaround for an xarray related mypy bug
# see https://github.com/python/mypy/pull/9495
# and https://github.com/space-physics/msise00/commit/8b59a9383dd6fcc54b7dac74eb95a350308d7b62
# TODO: is this still mandatory?
[[tool.mypy.overrides]]
module = "xarray"
follow_imports = "skip"
ignore_errors = true

[tool.ruff]
target-version = "py38"  # designated Python version
exclude = [
    '__init__.py',
    'doc/conf.py',
]
# TODO: should be the following list, but Ruff does not yet impl all of them.
#    W503,W504
#    E203
#    C408
ignore = [
    'C408',
    #'E203',
    'E402',
    #'W503',
    #'W504',
    "D203", "D211", "D213"
]
line-length = 88
select = [
    'B',  # flake8-bugbear
    'C',  # flake8-comprehensions
    #'D', # note: all relevant D's will be set by setting pydocstyle.convention=numpy!
    'E',  # pycodestyles
    'F',  # pyflakes
    'W',  # pycodestyle warnings
    'UP', # pyupgrade
    'T2',  # flake8-print
    'I001',  # isort
    'ICN', # import conventions, e.g. import numpy as np
    #'B950',  # not yet implemented by Ruff.
    'RUF100', # ensure 'noqa' declarations are still valid.
]

# Allow pydocstyle violations in certain areas.
per-file-ignores."**/{tests,tags,asdf,devtools}/**" = ["D"]
per-file-ignores."conftest.py" = ["D"]
per-file-ignores."tutorials/*" = ["D"]
# Allow prints in certain areas.
per-file-ignores."**/{cli,tests,tutorials,devtools}/**/*{.py,ipynb}" = ["T2"]

external = ["B950"]
pydocstyle = {convention = "numpy"}
#extend-ignore = ["D203", "D211", "D213"]
pyupgrade = {keep-runtime-typing = true}

mccabe = {max-complexity = 15}  # max branches inside a function.

[tool.ruff.isort]
known-first-party = ['weldx']

[tool.ruff.flake8-import-conventions]
extend-aliases = {xarray = 'xr'}
