from dataclasses import dataclass
from typing import List # noqa: F401
from asdf import yamlutil
from weldx.asdf.types import WeldxType


@dataclass
class {{class_name}}:
    """<CLASS DOCSTRING>"""
    {% for prop, dtype in zip(properties,property_types) -%}
        {{ prop }}: {{ dtype }}
    {% endfor %}

class {{class_name}}Type(WeldxType):
    """<ASDF TYPE DOCSTRING>"""

    name = "{{ asdf_name }}"
    version = "{{ asdf_version }}"
    types = [{{ class_name }}]
    requires = ["weldx"]
    handle_dynamic_subclasses = True

    @classmethod
    def to_tree(cls, node, ctx):
        tree = dict(
            {% for prop in properties -%}
            {{ prop }}=yamlutil.custom_tree_to_tagged_tree(node.{{ prop }}, ctx),
            {% endfor -%}
            )
        return tree

    @classmethod
    def from_tree(cls, tree, ctx):
        obj = {{ class_name }}(**tree)
        return obj
